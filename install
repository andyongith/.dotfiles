#!/usr/bin/bash

actions=()
selected_actions=()


install_deps_desc="install dependencies"
function install_deps() {
	if which -s pacman; then
		sudo pacman -Sy
		sudo pacman -S --needed --noconfirm git curl nerd-fonts noto-fonts \
			noto-fonts-emoji noto-fonts-cjk noto-fonts-extra
	elif which -s apt; then
		sudo apt update
		sudo apt install git curl fonts-noto
	fi
		
  if [ ! -d $HOME/.config ]; then
    mkdir $HOME/.config
  fi
}
actions+=(install_deps)
selected_actions+=(install_deps)


config_kitty_desc="kitty"
function config_kitty() {
  cd $HOME
  mkdir -p .config/kitty
  rm -rf .config/kitty/kitty.conf
  ln -sf ../../.dotfiles/.config/kitty/kitty.conf .config/kitty/kitty.conf
}
actions+=(config_kitty)
selected_actions+=(config_kitty)


config_tmux_desc="tmux"
function config_tmux() {
  cd $HOME
  ln -sf .dotfiles/.tmux.conf
}
actions+=(config_tmux)
selected_actions+=(config_tmux)


config_vim_desc="vim"
function config_vim() {
  cd $HOME
  ln -sf .dotfiles/.vimrc
  ln -sf .dotfiles/.vimrc.plug
}
actions+=(config_vim)
selected_actions+=(config_vim)


config_ranger_desc="ranger"
function config_ranger() {
  cd $HOME
  mkdir -p .config/ranger
  rm -rf .config/ranger/rc.conf
  ln -sf ../../.dotfiles/.config/ranger/rc.conf .config/ranger/rc.conf
}
actions+=(config_ranger)
selected_actions+=(config_ranger)


install_oh_my_bash_desc="install oh_my_bash"
function install_oh_my_bash() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)" --unattended
  sed -i "$(grep -n OSH_THEME= $HOME/.bashrc | cut -d: -f1)s/.*/OSH_THEME=powerline-multiline/" $HOME/.bashrc
}
actions+=(install_oh_my_bash)
selected_actions+=(install_oh_my_bash)


install_yay_desc="install yay"
function install_yay() {
  cd $HOME
  if which yay; then
    echo "yay is already installed"
  else
    git clone https://aur.archlinux.org/yay.git yay-git
    cd yay-git
    makepkg -si --noconfirm
  fi
}
actions+=(install_yay)


theme_grub_desc="grub theme"
function theme_grub() {
  mkdir -p $HOME/Downloads
  cd $HOME/Downloads
  git clone https://github.com/andyongith/argon-grub-theme.git
  cd argon-grub-theme
  sudo ./install.sh -r 1080p -b Crystals -e -i
}
actions+=(theme_grub)


### Menu
function select_from_menu()
{
  echo -en "\e[?25l" #hides cursor from terminal

  local prompt="--Select the configs you wanna install--"
  local options=()
  for option in ${actions[@]}
  do
    option="${option}_desc"
    options+=("${!option}")
  done
  options+=("INSTALL" "Cancel")
  local count=${#options[@]}
  local cursor=$(($count-2))
  local esc=$(echo -en "\e")
  local menu_opened=true

  function mv_cursor_up() {
    ((cursor-=1))
    [[ $cursor -lt 0 ]] && ((cursor = $count - 1))
  }
  function mv_cursor_down() {
    ((cursor+=1))
    [[ $cursor -ge $count ]] && cursor=0
  }

  function toggle_selection() {
    if echo ${selected_actions[@]} | grep -q "${actions[$cursor]}"
    then
      selected_actions=(${selected_actions[@]/${actions[$cursor]}})
    else
      selected_actions=(${selected_actions[@]} ${actions[$cursor]})
    fi
  }

  function exit_menu() {
    msg=$1
    exit_cmd=$2
    shift; shift;
    echo -en "\e[${count}B"
    echo -en "\e[?25h" #shows cursor
    echo $msg
    menu_opened=false
    $exit_cmd $@
  }

  function enter_pressed() {
    case ${options[$cursor]} in
      "INSTALL") exit_menu "Installing...";;
      "Cancel") exit_menu "Cancelling..." exit 1;;
      *) toggle_selection;;
    esac
  }

  function handle_keyboard() {
    local key0
    local key
    read -s -n1 key0
    case $key0 in
      "") enter_pressed;;
      "k") mv_cursor_up;;
      "j") mv_cursor_down;;
      $esc)
        read -s -n2 key
        case $key in
          "[A") mv_cursor_up;;
          "[B") mv_cursor_down;;
        esac
        ;;
    esac
  }

  function print_menu() {
    local index=0
    for opt in "${options[@]}"
    do
      if [[ -z "${actions[$index]}" ]]
      then
        echo -en "  \e[1;33m"
      elif $(echo ${selected_actions[@]} | grep -q "${actions[$index]}")
      then
        echo -en " \e[0;32m+\e[0m"
      else
        echo -en " \e[0;31m-\e[0m"
      fi
      if [[ $cursor == $index ]]
      then
        echo -e " \e[7m$opt\e[0m <  "
      else
        echo -e " $opt\e[0m  "
      fi
      ((index+=1))
    done
    echo -en "\e[${count}A"
  }
  
  echo $prompt
  while [[ $menu_opened == true ]]
  do
    print_menu
    handle_keyboard
  done
}

function install_selected() {
  for action in ${selected_actions[@]}
  do
    ${action}
  done
}

select_from_menu
install_selected

echo -e "\e[1mnote:You may need to reload your terminal\e[0m"
