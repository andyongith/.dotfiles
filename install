#!/usr/bin/bash

actions=()
selected_actions=()

install_deps_desc="install dependencies"
function install_deps() {
  sudo pacman -Sy
  sudo pacman -S --needed --noconfirm git nerd-fonts noto-fonts \
    noto-fonts-emoji noto-fonts-cjk noto-fonts-extra
  
  if [ ! -d $HOME/.config ]; then
    mkdir $HOME/.config
  fi
}
actions+=(install_deps)
selected_actions+=(install_deps)

config_kitty_desc="kitty"
function config_kitty() {
  cd $HOME
  mkdir -p .config/kitty
  rm -rf .config/kitty/kitty.conf
  ln -sf ../../.dotfiles/.config/kitty/kitty.conf .config/kitty/kitty.conf
}
actions+=(config_kitty)
selected_actions+=(config_kitty)

config_tmux_desc="tmux"
function config_tmux() {
  cd $HOME
  ln -sf .dotfiles/.tmux.conf
}
actions+=(config_tmux)
selected_actions+=(config_tmux)

config_vim_desc="vim"
function config_vim() {
  cd $HOME
  ln -sf .dotfiles/.vimrc
}
actions+=(config_vim)
selected_actions+=(config_vim)

config_ranger_desc="ranger"
function config_ranger() {
  cd $HOME
  mkdir -p .config/ranger
  rm -rf .config/ranger/rc.conf
  ln -sf ../../.dotfiles/.config/ranger/rc.conf .config/ranger/rc.conf
}
actions+=(config_ranger)
selected_actions+=(config_ranger)

install_oh_my_bash_desc="install oh_my_bash"
function install_oh_my_bash() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)" --unattended
  sed -i "$(grep -n OSH_THEME= $HOME/.bashrc | cut -d: -f1)s/.*/OSH_THEME=powerline-multiline/" $HOME/.bashrc
}
actions+=(install_oh_my_bash)
selected_actions+=(install_oh_my_bash)

install_yay_desc="install yay"
function install_yay() {
  cd $HOME
  if which yay; then
    echo "yay is already installed"
  else
    git clone https://aur.archlinux.org/yay.git yay-git
    cd yay-git
    makepkg -si --noconfirm
  fi
}
actions+=(install_yay)

theme_grub_desc="grub theme"
function theme_grub() {
  mkdir -p $HOME/Downloads
  cd $HOME/Downloads
  git clone https://github.com/andyongith/argon-grub-theme.git
  cd argon-grub-theme
  sudo ./install.sh -r 1080p -b Crystals -e -i
}
actions+=(theme_grub)


### Menu
function select_from_menu()
{
  local prompt="--Select the configs you wanna install--"
  local options=()
  for option in ${actions[@]}
  do
    option="${option}_desc"
    options+=("${!option}")
  done
  options+=("INSTALL" "Cancel")
  local count=${#options[@]}
  local cursor=$(($count-2))
  local esc=$(echo -en "\e")
  
  echo $prompt
  while true
  do
    ## printing menu
    local index=0
    for opt in "${options[@]}"
    do
      if [[ -z "${actions[$index]}" ]]
      then
        echo -en "  \e[1;33m"
      elif $(echo ${selected_actions[@]} | grep -q "${actions[$index]}")
      then
        echo -en " \e[0;32m+\e[0m"
      else
        echo -en " \e[0;31m-\e[0m"
      fi
      if [[ $cursor == $index ]]
      then
        echo -e " \e[7m$opt\e[0m <  "
      else
        echo -e " $opt\e[0m  "
      fi
      ((index+=1))
    done
    ## keyboard event handler
    local key0
    local key
    read -s -n1 key0
    if [[ $key0 == "" ]]
    then
      if [[ ${options[$cursor]} == "INSTALL" ]]
      then
        echo "Installing..."
        break
      elif [[ ${options[$cursor]} == "Cancel" ]]
      then
        echo "Cancelling..."
        exit 1
      elif $(echo ${selected_actions[@]} | grep -q "${actions[$cursor]}")
      then
        selected_actions=(${selected_actions[@]/${actions[$cursor]}})
      else
        selected_actions=(${selected_actions[@]} ${actions[$cursor]})
      fi
    elif [[ $key0 == $esc ]]
    then
      read -s -n2 key
      if [[ $key == [A ]]
      then
        ((cursor-=1))
        [[ $cursor -lt 0 ]] && ((cursor = $count - 1))
      elif [[ $key == [B ]]
      then
        ((cursor+=1))
        [[ $cursor -ge $count ]] && cursor=0
      fi
    fi
    echo -en "\e[${count}A"
  done
}

function install_selected() {
  for action in ${selected_actions[@]}
  do
    echo ${action}
  done
}

select_from_menu
install_selected

echo -e "\e[1mnote:You may need to reload your terminal\e[0m"
